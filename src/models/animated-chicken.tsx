/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: FourthGreen (https://sketchfab.com/FourthGreen)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/chicken-rig-b92464211274439b955700e3aa5c321f
Title: Chicken Rig
*/

'use client'

import { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { Group } from 'three'

// 3D Model from: https://sketchfab.com/3d-models/chicken-rig-b92464211274439b955700e3aa5c321f
interface AnimatedChickenProps {
  currentAnimation?: string;
  [key: string]: unknown;
}

export function AnimatedChicken({ currentAnimation = 'walk', ...props }: AnimatedChickenProps) {
  const group = useRef<Group>(null);

  // Load the 3D model and animations from the provided GLTF file
  const { nodes, materials, animations } = useGLTF('/3d/animated-chicken.glb');

  // Get access to the animations for the chicken
  const { actions } = useAnimations(animations, group);

  // Animation handling - play selected animation with proper cleanup
  useEffect(() => {
    // Stop all animations first
    Object.values(actions).forEach((action) => {
      if (action) action.stop();
    });

    // Play selected animation
    if (actions[currentAnimation]) {
      actions[currentAnimation].play();
    }

    // Cleanup function to stop animations on unmount
    return () => {
      if (actions) {
        Object.values(actions).forEach((action) => {
          if (action) {
            action.stop();
          }
        });
      }
    };
  }, [actions, currentAnimation]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.011}>
          <group name="ChickenFBX" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="Object_4">
                  <primitive object={nodes._rootJoint} />
                  <skinnedMesh
                    name="Object_7"
                    geometry={(nodes as any).Object_7.geometry}
                    material={materials.Main}
                    skeleton={(nodes as any).Object_7.skeleton}
                  />
                  <group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
                  <group name="Chicken" rotation={[-Math.PI / 2, 0, 0]} />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

// Preload model for performance
useGLTF.preload('/3d/animated-chicken.glb')